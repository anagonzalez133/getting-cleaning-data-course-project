library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = Speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab =  "Speed")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
install.packages("googlespreadsheets4")
install.packages("googlespreadsheet4")
install.packages("googlesheets4")
library(googlesheets4)
source('~/Coursera/03 - Getting and cleaning data/getting-cleaning-data-course-project/code/run_analysis.R')
wd()
getwd()
dirname()
dirname(rstudioapi::getActiveDocumentContext()$path)
rstudioapi::getActiveDocumentContext()
print(getwd())
source('~/Coursera/03 - Getting and cleaning data/getting-cleaning-data-course-project/code/run_analysis.R')
View(dt_tidy_data)
getwd()
make.codeBook <- function(set) {
df <- data.frame(
row.names = NULL,
column.names = names(set),
class = sapply(set, class),
range = sapply(set, function(x)
if (class(x) == "factor")
paste(levels(x), collapse = " / ")
else if (class(x) == "numeric" ||
class(x) == "integer")
paste(min(x), max(x), sep = "  /  ")
else
class(x)),
mean = sapply(set, function(x)
if (class(x) == "numeric")
mean(x)
else
"Not available")
)
write.table(df, "codeBook.md", sep = " | ")
}
make.codeBook(dt_tidy_data)
